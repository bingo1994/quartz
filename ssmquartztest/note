triggerKey  ====>triggerGroupName  +"."+ triggerName
jobKey  ====>jobGroupName  +"."+ jobName


---------------------------------------------------------
Cron表达式的格式：秒 分 时 日 月 周 年(可选)。
               字段名                 允许的值                        						允许的特殊字符  
               秒                         0-59                               , - * /  
               分                         0-59                               , - * /  
               小时                     0-23                               , - * /  
               日                         1-31                               , - * ? / L W C  
               月                         1-12 or JAN-DEC         			, - * /  
               周几                     1-7 or SUN-SAT          			, - * ? / L C #  
               年 (可选字段)     empty, 1970-2099     			, - * /
 
               “?”字符：表示不确定的值
               “,”字符：指定数个值
               “-”字符：指定一个值的范围
               “/”字符：指定一个值的增加幅度。n/m表示从n开始，每次增加m
               “L”字符：用在日表示一个月中的最后一天，用在周表示该月最后一个星期X
               “W”字符：指定离给定日期最近的工作日(周一到周五)
               “#”字符：表示该月第几个周X。6#3表示该月第3个周五
               
Cron表达式范例：
                 每隔5秒执行一次：*/5 * * * * ?
                 每隔1分钟执行一次：0 */1 * * * ?
                 每天23点执行一次：0 0 23 * * ?
---------------------------------------------------------

用scheduler.getCurrentlyExecutingJobs()这个方法获取正在执行的任务，发现得到的list是空的。但是我明明有任务在执行。
研究了一下才明白，是执行任务的时间太短，所以基本得不到。写一个需要执行很长时间的任务（其实就是while(true)……）。
这个时候scheduler.getCurrentlyExecutingJobs()得到的list就不是空的了。

---------------------------------------------------------

quartz 中JobExecutionContext的使用 ：
1.JobDataMap类：
	每个JobDetail都关联了一个JobDataMap实例,基本上是提供key-value形式的数据;
当开发人员创建JobDetail的时候，可以把附加信息放到JobDataMap中，那么在execute方法中可以根据key找到需要的值。
 	JobDetail job = new JobDetail.... 
    job.getJobDataMap().put("from","snowway@vip.sina.com"); 
    ...  
   
  在execute中 
   String from = jobExecutionContext.getJobDetail().getJobDataMap().getString("from"); 
   .... 
   
   
2.假如你需要一个java.sql.Connection，用于在execute中完成某些操作，那么你可以把Connection放入Quartz的SchedulerContext中，
execute也可以访问，并且Quartz不会持久化SchedulerContext中的任何东西。

 scheduler.getContext().put("java.sql.Connection",connection);  

execute中 
   Connection con = (Connection)jobExecutionContext.getScheduler().getContext().get("java.sql.Connection");  
   
   
   
   
---------------------------------------------------------

Quartz的监听器用于当任务调度中你所关注事件发生时，能够及时获取这一事件的通知。类似于任务执行过程中的邮件、短信类的提醒。
Quartz监听器主要有JobListener、TriggerListener、SchedulerListener三种，分别表示任务、触发器、调度器对应的监听器。

需要明确两个概念：
全局监听器与非全局监听器，二者的区别在于：
全局监听器能够接收到所有的Job/Trigger的事件通知，
而非全局监听器只能接收到在其上注册的Job或Trigger的事件，不在其上注册的Job或Trigger则不会进行监听。
